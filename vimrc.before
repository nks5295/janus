" Abbreviations
" -------------
" -------------

"iabbrev iferr if err != nil {<CR>}<esc>O
"iabbrev bail BAIL_ON_LWCA_ERROR(dwError);<CR>


" Disable Janus Plugins
" ---------------------
" ---------------------

"call janus#disable_plugin('vimwiki')
"call janus#disable_plugin('easymotion')
"call janus#disable_plugin('narrowregion')
" call janus#disable_plugin('vim-easytags')
" call janus#disable_plugin('vim-auto-save')


" Set misc. config options
" ------------------------
" ------------------------

set t_Co=256
set background=dark
"let g:molokai_original = 1
"let g:rehash256 = 1

set hidden
let g:auto_save=1

set encoding=utf-8
set guifont=Hack_Nerd_Font:h13


" Colorscheme config values
" -------------------------
" -------------------------

" "Credit joshdick
" "Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
" "If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
" "(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
" if (empty($TMUX))
"   if (has("nvim"))
"   "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
"   let $NVIM_TUI_ENABLE_TRUE_COLOR=1
"   endif
"   "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"   "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
"   " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
"   if (has("termguicolors"))
"     set termguicolors
"   endif
" endif

" SimplifySimplify_Dark
" ---------------------
" let g:simplifysimplify_dark_LineNr = 'off'
" Onedark
" -------
" let g:onedark_termcolors = 256
" let g:onedark_terminal_italics = 1
" Neodark
" -------
" let g:neodark#use_256color = 1
" let g:neodark#terminal_transparent = 1
" let g:neodark#solid_vertsplit = 1
" Quantum
" -------
" let g:quantum_black = 1
" let g:quantum_italics = 1

"set background=dark
"set termguicolors
"if has('nvim')
"    set termguicolors
"endif


" vim-airline Setup
" -----------------
" -----------------

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_powerline_fonts = 1
let g:airline_section_y = 'B: %{bufnr("%")}'
let g:airline#extensions#tabline#enabled = 1


" vim-airline theme options
" -------------------------
let g:airline_theme='simple'
"let g:airline_theme='one'
"let g:airline_theme='onedark'
"  - luna
"  - base16-spacemacs
"  - tomorrow
"  - simple-theme


" Powerline Status Bar Setup
" --------------------------
" --------------------------

" For powerline installed through pip
" -----------------------------------
"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
"python del powerline_setup


" Plugin Config
" -------------
" -------------

let g:ctrlp_extensions = ['tag']
let g:session_autosave = 'no'
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:vim_markdown_folding_disabled = 1
" Deoplete
" --------
if has('nvim')
    let g:deoplete#enable_at_startup = 1
    "call deoplete#custom#option('omni_patterns', { 'go': '[^. *\t]\.\w*' })
    let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
    let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
endif

" NCM2
" -----
" enable ncm2 for all buffers
" autocmd BufEnter * call ncm2#enable_for_buffer()
" " :help Ncm2PopupOpen for more information
" set completeopt=noinsert,menuone,noselect
" let g:ncm2_look_enabled = 0
" set shortmess+=c
" set completeopt+=menuone
" set completeopt+=noinsert
" inoremap <expr> <CR> (pumvisible() ? "\<c-y>" : "\<CR>")
" augroup vimrc
"   autocmd BufEnter * call ncm2#enable_for_buffer()
"   autocmd TextChangedI * call ncm2#auto_trigger()
" augroup END

if executable("ag")
    let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
endif
"let g:go_auto_sameids = 1
"let g:keepeye_autostart = 1
let g:gitgutter_async = 0

" Golang Configs
" --------------------------------
" --------------------------------

let g:go_autodetect_gopath = 1
let g:go_info_mode = 'gopls'
let g:go_def_mode = 'gopls'
let g:go_rename_command = 'gopls'
let g:go_implements_mode = 'gopls'

let g:go_highlight_space_tab_error = 0
let g:go_highlight_array_whitespace_error = 0
let g:go_highlight_trailing_whitespace_error = 0
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_variable_assignments = 1
let g:go_highlight_variable_declarations = 1
let g:go_highlight_operators = 1
let g:go_highlight_format_strings = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_parameters = 1
let g:go_gocode_propose_source = 1

let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }


" Plugin key-mappings.
" --------------------
" --------------------

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
" -------------------------------------------------------------
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
